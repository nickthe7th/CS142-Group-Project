#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <math.h>

using namespace std;

const int SIZE_CONSTANT = 10;
const int SET_WIDTH_CONSTANT = 9;
const int SET_PRECISION_CONSTANT = 3;

void WriteToFile(int array[SIZE_CONSTANT][SIZE_CONSTANT]);

bool IterateHotPlate(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]);

void PrintHotPlate(double input[SIZE_CONSTANT][SIZE_CONSTANT]);

void InitializeHotPlate(double hotPlate[SIZE_CONSTANT][SIZE_CONSTANT]);

int main() {
    int array[SIZE_CONSTANT][SIZE_CONSTANT];
    
    //function initalize the array
    // Nick
    //function print array to screen
    // Nick
    //function manipulate the array
    // Nick

    cout << "Printing plate after one iteration..." << endl;
    //bool placeholder = iteration function **REMEMBER TO UNCOMMENT THIS**
    //PrintArray(array); **REMEMBER TO UNCOMMENT THIS**


    bool continueLooping = true; //Should be self explanatory what this variable does.
    bool isDone = false; //Is done refers to whether or not the values in the plate have ceased to change by more than 0.1 degrees. This is modified
    // by manipulate array function
    int counter = 1; //Counter must be set to 1 [one] since this counts the number of iterations the hot plate has been through. By this point in the code
        // the array has already been through one iteration.
    int copyArray[SIZE_CONSTANT][SIZE_CONSTANT]; //This is the copy array. More on that in a later comment
    int i,j;

    while (continueLooping) {
        //isDone = what the function returns {TYPE BOOL}
        continueLooping = false; //**TAKE THIS LINE OUT**
        if (isDone) {
            cout << "Printing final plate..." << endl;
            //PrintArray(array);
            continueLooping = false;
        } else if (counter == 3) { //This copies the array after the third iteration so that it can be printed out later on in the program.
            for (i = 0; i < SIZE_CONSTANT; i++) {
                for (j = 0; j < SIZE_CONSTANT; j++) {
                    copyArray[i][j] = array[i][j];
                }
            }
        }
        counter++; //Increments the number of times the array has been modified.
    }

    cout << "Writing final plate to \"Hotplate.csv\"..." << endl;
    WriteToFile(array); //The array should be modified after each iteration using an array pass-by reference

    cout << "Printing input plate after 3 updates..." << endl;
    //PrintArray(copyArray); {NICK, can you implement the print function right here as well?}
}

void WriteToFile(int array[SIZE_CONSTANT][SIZE_CONSTANT]) {

    string fileName = "Hotplate.csv";
    ofstream outSS;
    outSS.open(fileName);

    int i,j;

    cout << fixed << setprecision(SET_PRECISION_CONSTANT);
    for (i = 0; i < SIZE_CONSTANT; i++) {
        for (j = 0; j < SIZE_CONSTANT; j++) {
            if (j != SIZE_CONSTANT -1) {
                outSS << setw(SET_WIDTH_CONSTANT) << array[i][j] << ",";
            } else {
                outSS << setw(SET_WIDTH_CONSTANT) << array[i][j];
            }
        }
        outSS << endl;
    }

    outSS.close();
}


bool IterateHotPlate(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]){

    //Creates a copy of the current state of the hotplate
    double copyArray[10][10];
    for (int i=0; i<10; i++){
        for (int j=0; j<10; j++){
            copyArray[i][j] = inputArray[i][j];
        }
    }

    //Updates the hotplate for the next iteration
    for (int i=1; i<9; i++){
        for (int j=1; j<9; j++){
            inputArray[i][j] = (copyArray[i][j-1] + copyArray[i][j+1] + copyArray[i+1][j] + copyArray[i-1][j])/4.0;
        }
    }

    //Checks how many "cells" changed less than 0.1
    int steadyStateCheck = 0;
    for (int i=0; i<10; i++){
        for (int j=0; j<10; j++){
            if ((fabs(inputArray[i][j]-copyArray[i][j]) <= 0.1)){
                steadyStateCheck++;
            }
        }
    }

    bool done = (steadyStateCheck==100);
    return done;
}

void PrintHotPlate(double input[10][10]){
    //Simple function to print the current state of the hotplate
    for (int i=0; i<10; i++){
        for (int j=0; j<9; j++){
            cout << fixed << setprecision(3) << setw(9) << input[i][j] << ",";
        }
        cout << fixed << setprecision(3) << setw(9) << input[i][9] << endl;
    }
    
void InitializeHotPlate(double hotPlate[SIZE_CONSTANT][SIZE_CONSTANT]){
    ifstream inFS;
    inFS.open("Input.txt");

    if(!inFS.is_open()){
        cout << "File failed to open" << endl;
    }

    int input=0;
    double hotPlate[10][10];
    for (int i=0; i<10; i++){
        for (int j=0; j<10; j++){
            inFS >> input;
            hotPlate[i][j] = input;
        }
    }
    inFS.close();
    }
